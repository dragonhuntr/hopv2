generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  public
  private
}

enum DocumentKind {
  text
  code
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String    @db.Text
  accounts      Account[]
  Chat          Chat[]
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime  @default(now())
  title     String?
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  model     String
  visibility Visibility @default(private)

  @@index([userId])
}

model Message {
  id          String   @id @default(uuid())
  content     Json
  role        String // "user" or "assistant"
  createdAt   DateTime @default(now())
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  attachments Attachment[]

  @@index([chatId])
}

model Attachment {
  id          String   @id @default(uuid())
  name        String
  url         String
  contentType String   // Stores MIME type (e.g. "image/jpeg", "application/pdf")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String

  @@index([messageId])
}
