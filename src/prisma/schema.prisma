generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  public
  private
}

enum DocumentKind {
  text
  code
}

enum AttachmentStatus {
  pending    // Just uploaded, not associated with a message
  active     // Associated with a sent message
  deleted    // Marked for deletion
}

model Account {
  id                    String    @id
  userId                String
  accountId             String    // Required by Better Auth
  providerId            String    // Required by Better Auth
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken              String?
  password             String?   // For email/password auth
  createdAt            DateTime
  updatedAt            DateTime
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Remove these legacy/duplicate fields
  // type, provider, providerAccountId, refresh_token, access_token,
  // expires_at, token_type, session_state, refresh_token_expires_in

  @@map("account")
}

model User {
  id            String    @id
  name          String    // Remove optional (?)
  email         String?   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  attachments   Attachment[]

  @@map("user")
}

model Chat {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  title      String?
  messages   Message[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  model      String
  visibility Visibility @default(private)

  @@index([userId])
}

model Message {
  id          String       @id @default(uuid())
  content     Json
  role        String // "user" or "assistant"
  createdAt   DateTime     @default(now())
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  attachments Attachment[]

  @@index([chatId])
}

model Attachment {
  id          String           @id @default(uuid())
  name        String
  url         String
  contentType String           // Stores MIME type (e.g. "image/jpeg", "application/pdf")
  status      AttachmentStatus @default(pending)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  message     Message?         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String?
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([messageId])
  @@index([userId])
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime

  @@map("verification")
}
